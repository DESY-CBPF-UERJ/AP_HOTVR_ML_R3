#include "HEPHero.h"

//-------------------------------------------------------------------------------------------------
// Description:
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Define output variables
//-------------------------------------------------------------------------------------------------
namespace Test{

    Ort::Env env(OrtLoggingLevel::ORT_LOGGING_LEVEL_WARNING, "onnx_model");
    Ort::SessionOptions sessionOptions;
    Ort::Session session(env, "AP_HOTVR_ML_R3/include/onnx_initial_model.onnx", sessionOptions);
    Ort::MemoryInfo memoryInfo = Ort::MemoryInfo::CreateCpu( OrtAllocatorType::OrtArenaAllocator, OrtMemType::OrtMemTypeDefault);
    size_t numInputNodes;
    size_t numOutputNodes;
    float ZtoQQxQCD_tag;

}


//-------------------------------------------------------------------------------------------------
// Define output derivatives
//-------------------------------------------------------------------------------------------------
void HEPHero::SetupTest() {

    //======SETUP CUTFLOW==========================================================================
    //_cutFlow.insert(pair<string,double>("CutName", 0) );   [example]

    //======SETUP HISTOGRAMS=======================================================================
    makeHist( "NJets", 20, 0., 20., "Numbers of Jets", "Events" );
    //makeHist( "histogram2DName", 40, 0., 40., 100, 0., 50., "xlabel",  "ylabel", "zlabel", "COLZ" );   [example]

    //======SETUP SYSTEMATIC HISTOGRAMS============================================================
    //sys_regions = { 0, 1, 2 }; [example] // Choose regions as defined in RegionID. Empty vector means that all events will be used.
    //makeSysHist( "histogram1DSysName", 40, 0., 40., "xlabel", "ylabel" );   [example]
    //makeSysHist( "histogram2DSysName", 40, 0., 40., 100, 0., 50., "xlabel",  "ylabel", "zlabel", "COLZ" );   [example]

    //======SETUP OUTPUT BRANCHES==================================================================
    //_outputTree->Branch("variable1NameInTheTree", &Test::variable1Name );  [example]

    //======SETUP INFORMATION IN OUTPUT HDF5 FILE==================================================
    HDF_insert("ZtoQQxQCD_tag", &Test::ZtoQQxQCD_tag );

    string model_file = "AP_HOTVR_ML_R3/Metadata/ML/2022/model.onnx";

    Test::sessionOptions.SetIntraOpNumThreads(1);
    Test::sessionOptions.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);
    Test::session = Ort::Session(Test::env, model_file.c_str(), Test::sessionOptions);

    Test::numInputNodes = Test::session.GetInputCount();
    Test::numOutputNodes = Test::session.GetOutputCount();

    return;
}


//-------------------------------------------------------------------------------------------------
// Define the selection region
//-------------------------------------------------------------------------------------------------
bool HEPHero::TestRegion() {

    //-------------------------------------------------------------------------
    // Cut description
    //-------------------------------------------------------------------------
    //if( !(CutCondition) ) return false;           [Example]
    //_cutFlow.at("CutName") += evtWeight;          [Example]

    return true;
}


//-------------------------------------------------------------------------------------------------
// Write your analysis code here
//-------------------------------------------------------------------------------------------------
void HEPHero::TestSelection() {


    _histograms1D.at("NJets").Fill( jet_pt->size(), evtWeight );


    vector<float> pf_points = {-1.6944e-01, -1.6908e-01, -2.4672e-01, -2.4452e-01, -2.7565e-01,
            -1.5864e-01, -2.6961e-01, -2.0076e-01, -1.2293e-01, -3.2472e-01,
            -3.1520e-01, -3.9595e-01, -1.4289e-01, -4.3862e-01, -2.7455e-01,
            -2.5532e-01, -3.0550e-01, -4.1078e-01, -2.7473e-01, -2.9213e-01,
            -3.3992e-01, -1.3484e-01, -3.2417e-01, -7.9697e-01,  1.4258e-01,
            -2.2731e-01,  1.6413e-02,  1.2121e+00,  2.2424e-01, -3.9943e-01,
            -4.0900e-02,  8.8143e-01,  2.8467e-01, -9.7037e-01, -3.7398e-01,
            -3.7892e-01,  1.0178e+00, -5.4903e-01,  7.3641e-01,  5.8314e-01,
            -1.1927e-01,  4.1505e-01,  7.8548e-01, -2.4122e-01,  1.8245e-02,
            1.6711e-01, -4.5949e-01,  2.3486e-01, -3.6867e-01,  7.3201e-01,
            -4.9961e-02, -5.1975e-02, -4.4834e-02, -5.3990e-02, -5.8750e-02,
            -4.7214e-02, -5.3074e-02, -6.4976e-02, -8.0358e-02,  3.1157e-02,
            -7.7794e-02,  8.2794e-02,  1.7973e-02, -3.4946e-02, -1.0929e-01,
            -3.8608e-02,  1.3700e-01, -1.4152e-01,  8.9386e-02, -9.0429e-02,
            1.2663e-02,  9.6162e-02,  8.6457e-02,  6.5582e-02,  2.3130e-01,
            2.4943e-01,  2.3514e-01,  3.9701e-01,  4.3657e-01,  1.2509e-01,
            2.4869e-01,  7.2496e-01,  1.4285e-01, -3.3664e-02,  3.1461e-01,
            -1.1863e-01, -5.9666e-02, -5.6370e-02,  4.1020e-01,  4.5440e-02,
            6.8871e-01, -1.6093e-01,  5.0487e-01,  4.0873e-01, -1.0618e-01,
            -1.8473e-01,  5.3380e-01,  5.2959e-01,  5.0395e-01,  2.1244e-01,
            -3.0759e-02, -1.2497e-02, -3.9308e-01, -3.9190e-01, -4.0362e-01,
            -1.8943e-02, -4.0382e-01, -4.0059e-01,  6.8622e-04, -3.5714e-01,
            1.4171e-01, -3.1407e-01, -3.4991e-01, -4.2286e-01, -3.7325e-01,
            -4.4308e-01, -3.8517e-01, -3.5655e-01, -4.0304e-01, -4.8263e-01,
            -2.9844e-01, -6.6402e-02,  9.7470e-02,  5.3860e-01,  1.1666e+00,
            -1.3665e-02, -4.6283e-02,  9.7221e-01,  3.3917e-01, -4.3410e-01,
            2.7316e-01,  1.2253e+00,  1.0661e+00,  5.2424e-01,  8.3460e-01,
            5.4251e-01,  2.3692e-01,  9.1643e-01,  5.8898e-01,  1.3585e+00,
            -3.0938e-01,  3.5567e-01,  2.1162e-01, -5.1885e-01,  4.1330e-01,
            8.6449e-01, -4.7619e-01,  1.2515e+00, -2.1000e-02,  4.9630e-01,
            -3.2101e-02, -3.6300e-02, -3.3858e-02, -2.4971e-02, -1.6768e-02,
            -5.8664e-02, -4.1183e-02,  1.0284e-02,  2.6104e-02, -7.0187e-02,
            -6.9112e-02, -7.2335e-02, -1.2507e-01, -4.2161e-02,  1.2626e-02,
            -6.6088e-02,  3.8441e-01, -1.4763e-01, -5.5340e-04, -1.7195e-01,
            -8.7183e-02, -1.7498e-01, -1.6696e-01,  3.0707e-01,  8.4165e-01,
            5.2613e-01,  6.4380e-01,  7.6295e-02,  1.2503e-01,  5.3716e-01,
            4.0912e-01,  2.4292e-01,  7.4996e-01, -1.7956e-01,  6.5864e-01,
            -1.0631e-01,  1.0585e-02,  7.0074e-01,  2.8872e-01, -1.8268e-01,
            7.4357e-02,  6.2748e-01,  1.1194e-01,  5.0131e-01, -2.0614e-01,
            -2.0135e-01,  5.2994e-01,  7.1803e-01,  8.1676e-01,  2.6333e-01
            };

    vector<float> pf_features = {4.1372e+00,  3.8163e+00,  3.6747e+00,  3.1016e+00,  3.0939e+00,
            3.0460e+00,  3.0348e+00,  2.6507e+00,  2.4764e+00,  2.3850e+00,
            2.3439e+00,  2.1998e+00,  2.1215e+00,  1.9997e+00,  1.8536e+00,
            1.7258e+00,  1.6102e+00,  1.4524e+00,  1.4085e+00,  1.2561e+00,
            1.2187e+00,  1.1983e+00,  1.1953e+00,  1.0848e+00,  9.9296e-01,
            9.4403e-01,  9.3640e-01,  9.1941e-01,  8.9177e-01,  8.0134e-01,
            7.4454e-01,  7.2202e-01,  6.6392e-01,  6.5279e-01,  6.4821e-01,
            6.4309e-01,  6.3069e-01,  6.1814e-01,  6.0329e-01,  5.7182e-01,
            5.5233e-01,  5.2556e-01,  4.7888e-01,  4.6241e-01,  4.5624e-01,
            4.5500e-01,  4.0024e-01,  3.8906e-01,  3.7237e-01,  3.5129e-01,
            4.1372e+00,  3.8163e+00,  3.6747e+00,  3.1016e+00,  3.0939e+00,
            3.0460e+00,  3.0348e+00,  2.6507e+00,  2.4764e+00,  2.3850e+00,
            2.3439e+00,  2.1998e+00,  2.1215e+00,  1.9997e+00,  1.8536e+00,
            1.7258e+00,  1.6102e+00,  1.4524e+00,  1.4085e+00,  1.2561e+00,
            1.2187e+00,  1.1983e+00,  1.1953e+00,  1.0848e+00,  9.9296e-01,
            9.4403e-01,  9.3640e-01,  9.1941e-01,  8.9177e-01,  8.0134e-01,
            7.4454e-01,  7.2202e-01,  6.6392e-01,  6.5279e-01,  6.4821e-01,
            6.4309e-01,  6.3069e-01,  6.1814e-01,  6.0329e-01,  5.7182e-01,
            5.5233e-01,  5.2556e-01,  4.7888e-01,  4.6241e-01,  4.5624e-01,
            4.5500e-01,  4.0024e-01,  3.8906e-01,  3.7237e-01,  3.5129e-01,
            4.2036e+00,  3.8829e+00,  3.7165e+00,  3.1441e+00,  3.1279e+00,
            3.1163e+00,  3.0704e+00,  2.7065e+00,  2.5601e+00,  2.4077e+00,
            2.3685e+00,  2.2100e+00,  2.1977e+00,  2.0048e+00,  1.8881e+00,
            1.7655e+00,  1.6373e+00,  1.4610e+00,  1.4433e+00,  1.2867e+00,
            1.2390e+00,  1.2774e+00,  1.2189e+00,  1.1180e+00,  1.2094e+00,
            9.9149e-01,  1.0839e+00,  2.0060e+00,  1.1578e+00,  8.1281e-01,
            8.6325e-01,  1.5055e+00,  9.7117e-01,  7.4574e-01,  6.6416e-01,
            6.5828e-01,  1.5373e+00,  6.1820e-01,  1.2605e+00,  1.1017e+00,
            6.3750e-01,  9.2549e-01,  1.1785e+00,  5.0930e-01,  6.0640e-01,
            6.8775e-01,  4.0764e-01,  6.6449e-01,  3.9109e-01,  1.0039e+00,
            4.2036e+00,  3.8829e+00,  3.7165e+00,  3.1441e+00,  3.1279e+00,
            3.1163e+00,  3.0704e+00,  2.7065e+00,  2.5601e+00,  2.4077e+00,
            2.3685e+00,  2.2100e+00,  2.1977e+00,  2.0048e+00,  1.8881e+00,
            1.7655e+00,  1.6373e+00,  1.4610e+00,  1.4433e+00,  1.2867e+00,
            1.2390e+00,  1.2774e+00,  1.2189e+00,  1.1180e+00,  1.2094e+00,
            9.9149e-01,  1.0839e+00,  2.0060e+00,  1.1578e+00,  8.1281e-01,
            8.6325e-01,  1.5055e+00,  9.7117e-01,  7.4574e-01,  6.6416e-01,
            6.5828e-01,  1.5373e+00,  6.1820e-01,  1.2605e+00,  1.1017e+00,
            6.3750e-01,  9.2549e-01,  1.1785e+00,  5.0930e-01,  6.0640e-01,
            6.8775e-01,  4.0764e-01,  6.6449e-01,  3.9109e-01,  1.0039e+00,
            -1.6944e-01, -1.6908e-01, -2.4672e-01, -2.4452e-01, -2.7565e-01,
            -1.5864e-01, -2.6961e-01, -2.0076e-01, -1.2293e-01, -3.2472e-01,
            -3.1520e-01, -3.9595e-01, -1.4289e-01, -4.3862e-01, -2.7455e-01,
            -2.5532e-01, -3.0550e-01, -4.1078e-01, -2.7473e-01, -2.9213e-01,
            -3.3992e-01, -1.3484e-01, -3.2417e-01, -7.9697e-01,  1.4258e-01,
            -2.2731e-01,  1.6413e-02,  1.2121e+00,  2.2424e-01, -3.9943e-01,
            -4.0900e-02,  8.8143e-01,  2.8467e-01, -9.7037e-01, -3.7398e-01,
            -3.7892e-01,  1.0178e+00, -5.4903e-01,  7.3641e-01,  5.8314e-01,
            -1.1927e-01,  4.1505e-01,  7.8548e-01, -2.4122e-01,  1.8245e-02,
            1.6711e-01, -4.5949e-01,  2.3486e-01, -3.6867e-01,  7.3201e-01,
            -1.6944e-01, -1.6908e-01, -2.4672e-01, -2.4452e-01, -2.7565e-01,
            -1.5864e-01, -2.6961e-01, -2.0076e-01, -1.2293e-01, -3.2472e-01,
            -3.1520e-01, -3.9595e-01, -1.4289e-01, -4.3862e-01, -2.7455e-01,
            -2.5532e-01, -3.0550e-01, -4.1078e-01, -2.7473e-01, -2.9213e-01,
            -3.3992e-01, -1.3484e-01, -3.2417e-01, -7.9697e-01,  1.4258e-01,
            -2.2731e-01,  1.6413e-02,  1.2121e+00,  2.2424e-01, -3.9943e-01,
            -4.0900e-02,  8.8143e-01,  2.8467e-01, -9.7037e-01, -3.7398e-01,
            -3.7892e-01,  1.0178e+00, -5.4903e-01,  7.3641e-01,  5.8314e-01,
            -1.1927e-01,  4.1505e-01,  7.8548e-01, -2.4122e-01,  1.8245e-02,
            1.6711e-01, -4.5949e-01,  2.3486e-01, -3.6867e-01,  7.3201e-01,
            -3.0759e-02, -1.2497e-02, -3.9308e-01, -3.9190e-01, -4.0362e-01,
            -1.8943e-02, -4.0382e-01, -4.0059e-01,  6.8622e-04, -3.5714e-01,
            1.4171e-01, -3.1407e-01, -3.4991e-01, -4.2286e-01, -3.7325e-01,
            -4.4308e-01, -3.8517e-01, -3.5655e-01, -4.0304e-01, -4.8263e-01,
            -2.9844e-01, -6.6402e-02,  9.7470e-02,  5.3860e-01,  1.1666e+00,
            -1.3665e-02, -4.6283e-02,  9.7221e-01,  3.3917e-01, -4.3410e-01,
            2.7316e-01,  1.2253e+00,  1.0661e+00,  5.2424e-01,  8.3460e-01,
            5.4251e-01,  2.3692e-01,  9.1643e-01,  5.8898e-01,  1.3585e+00,
            -3.0938e-01,  3.5567e-01,  2.1162e-01, -5.1885e-01,  4.1330e-01,
            8.6449e-01, -4.7619e-01,  1.2515e+00, -2.1000e-02,  4.9630e-01,
            -3.0759e-02, -1.2497e-02, -3.9308e-01, -3.9190e-01, -4.0362e-01,
            -1.8943e-02, -4.0382e-01, -4.0059e-01,  6.8622e-04, -3.5714e-01,
            1.4171e-01, -3.1407e-01, -3.4991e-01, -4.2286e-01, -3.7325e-01,
            -4.4308e-01, -3.8517e-01, -3.5655e-01, -4.0304e-01, -4.8263e-01,
            -2.9844e-01, -6.6402e-02,  9.7470e-02,  5.3860e-01,  1.1666e+00,
            -1.3665e-02, -4.6283e-02,  9.7221e-01,  3.3917e-01, -4.3410e-01,
            2.7316e-01,  1.2253e+00,  1.0661e+00,  5.2424e-01,  8.3460e-01,
            5.4251e-01,  2.3692e-01,  9.1643e-01,  5.8898e-01,  1.3585e+00,
            -3.0938e-01,  3.5567e-01,  2.1162e-01, -5.1885e-01,  4.1330e-01,
            8.6449e-01, -4.7619e-01,  1.2515e+00, -2.1000e-02,  4.9630e-01,
            4.8157e+00,  4.7340e+00,  4.5565e+00,  4.0337e+00,  3.6936e+00,
            2.7996e+00,  2.6955e+00,  2.6205e+00,  2.5810e+00,  2.5119e+00,
            2.3150e+00,  2.2587e+00,  1.9336e+00,  1.7950e+00,  1.6605e+00,
            1.5785e+00,  1.5264e+00,  1.3750e+00,  1.1598e+00,  1.1531e+00,
            1.1141e+00,  1.0403e+00,  9.9945e-01,  7.7199e-01,  6.9510e-01,
            5.7841e-01,  5.7347e-01,  5.0515e-01,  4.9448e-01,  4.3117e-01,
            3.9302e-01,  2.8671e-01,  2.8156e-01,  2.7193e-01,  2.0819e-01,
            1.2470e-01,  1.1865e-01,  1.1343e-01, -3.7308e-02, -5.9862e-02,
            -7.7117e-02, -1.2243e-01, -1.2354e-01, -2.1367e-01, -2.1852e-01,
            -2.1973e-01, -2.3444e-01, -2.4874e-01, -2.8249e-01, -3.0409e-01,
            4.8157e+00,  4.7340e+00,  4.5565e+00,  4.0337e+00,  3.6936e+00,
            2.7996e+00,  2.6955e+00,  2.6205e+00,  2.5810e+00,  2.5119e+00,
            2.3150e+00,  2.2587e+00,  1.9336e+00,  1.7950e+00,  1.6605e+00,
            1.5785e+00,  1.5264e+00,  1.3750e+00,  1.1598e+00,  1.1531e+00,
            1.1141e+00,  1.0403e+00,  9.9945e-01,  7.7199e-01,  6.9510e-01,
            5.7841e-01,  5.7347e-01,  5.0515e-01,  4.9448e-01,  4.3117e-01,
            3.9302e-01,  2.8671e-01,  2.8156e-01,  2.7193e-01,  2.0819e-01,
            1.2470e-01,  1.1865e-01,  1.1343e-01, -3.7308e-02, -5.9862e-02,
            -7.7117e-02, -1.2243e-01, -1.2354e-01, -2.1367e-01, -2.1852e-01,
            -2.1973e-01, -2.3444e-01, -2.4874e-01, -2.8249e-01, -3.0409e-01,
            5.6472e+00,  5.5637e+00,  5.3926e+00,  4.8616e+00,  4.5172e+00,
            3.6336e+00,  3.5242e+00,  3.4385e+00,  3.3853e+00,  3.4170e+00,
            3.1216e+00,  3.2112e+00,  2.8267e+00,  2.6401e+00,  2.4389e+00,
            2.4203e+00,  2.5292e+00,  2.1249e+00,  2.1185e+00,  1.9485e+00,
            2.0025e+00,  2.0054e+00,  1.9556e+00,  1.7090e+00,  1.7862e+00,
            1.6869e+00,  1.6685e+00,  1.7540e+00,  1.7813e+00,  1.4229e+00,
            1.5010e+00,  1.8533e+00,  1.2905e+00,  1.1181e+00,  1.3787e+00,
            8.9487e-01,  9.4292e-01,  9.4067e-01,  1.2244e+00,  8.5835e-01,
            1.4543e+00,  6.1043e-01,  1.2296e+00,  1.0473e+00,  5.6585e-01,
            4.9595e-01,  1.1469e+00,  1.1285e+00,  1.0701e+00,  7.7133e-01,
            5.6472e+00,  5.5637e+00,  5.3926e+00,  4.8616e+00,  4.5172e+00,
            3.6336e+00,  3.5242e+00,  3.4385e+00,  3.3853e+00,  3.4170e+00,
            3.1216e+00,  3.2112e+00,  2.8267e+00,  2.6401e+00,  2.4389e+00,
            2.4203e+00,  2.5292e+00,  2.1249e+00,  2.1185e+00,  1.9485e+00,
            2.0025e+00,  2.0054e+00,  1.9556e+00,  1.7090e+00,  1.7862e+00,
            1.6869e+00,  1.6685e+00,  1.7540e+00,  1.7813e+00,  1.4229e+00,
            1.5010e+00,  1.8533e+00,  1.2905e+00,  1.1181e+00,  1.3787e+00,
            8.9487e-01,  9.4292e-01,  9.4067e-01,  1.2244e+00,  8.5835e-01,
            1.4543e+00,  6.1043e-01,  1.2296e+00,  1.0473e+00,  5.6585e-01,
            4.9595e-01,  1.1469e+00,  1.1285e+00,  1.0701e+00,  7.7133e-01,
            -4.9961e-02, -5.1975e-02, -4.4834e-02, -5.3990e-02, -5.8750e-02,
            -4.7214e-02, -5.3074e-02, -6.4976e-02, -8.0358e-02,  3.1157e-02,
            -7.7794e-02,  8.2794e-02,  1.7973e-02, -3.4946e-02, -1.0929e-01,
            -3.8608e-02,  1.3700e-01, -1.4152e-01,  8.9386e-02, -9.0429e-02,
            1.2663e-02,  9.6162e-02,  8.6457e-02,  6.5582e-02,  2.3130e-01,
            2.4943e-01,  2.3514e-01,  3.9701e-01,  4.3657e-01,  1.2509e-01,
            2.4869e-01,  7.2496e-01,  1.4285e-01, -3.3664e-02,  3.1461e-01,
            -1.1863e-01, -5.9666e-02, -5.6370e-02,  4.1020e-01,  4.5440e-02,
            6.8871e-01, -1.6093e-01,  5.0487e-01,  4.0873e-01, -1.0618e-01,
            -1.8473e-01,  5.3380e-01,  5.2959e-01,  5.0395e-01,  2.1244e-01,
            -4.9961e-02, -5.1975e-02, -4.4834e-02, -5.3990e-02, -5.8750e-02,
            -4.7214e-02, -5.3074e-02, -6.4976e-02, -8.0358e-02,  3.1157e-02,
            -7.7794e-02,  8.2794e-02,  1.7973e-02, -3.4946e-02, -1.0929e-01,
            -3.8608e-02,  1.3700e-01, -1.4152e-01,  8.9386e-02, -9.0429e-02,
            1.2663e-02,  9.6162e-02,  8.6457e-02,  6.5582e-02,  2.3130e-01,
            2.4943e-01,  2.3514e-01,  3.9701e-01,  4.3657e-01,  1.2509e-01,
            2.4869e-01,  7.2496e-01,  1.4285e-01, -3.3664e-02,  3.1461e-01,
            -1.1863e-01, -5.9666e-02, -5.6370e-02,  4.1020e-01,  4.5440e-02,
            6.8871e-01, -1.6093e-01,  5.0487e-01,  4.0873e-01, -1.0618e-01,
            -1.8473e-01,  5.3380e-01,  5.2959e-01,  5.0395e-01,  2.1244e-01,
            -3.2101e-02, -3.6300e-02, -3.3858e-02, -2.4971e-02, -1.6768e-02,
            -5.8664e-02, -4.1183e-02,  1.0284e-02,  2.6104e-02, -7.0187e-02,
            -6.9112e-02, -7.2335e-02, -1.2507e-01, -4.2161e-02,  1.2626e-02,
            -6.6088e-02,  3.8441e-01, -1.4763e-01, -5.5340e-04, -1.7195e-01,
            -8.7183e-02, -1.7498e-01, -1.6696e-01,  3.0707e-01,  8.4165e-01,
            5.2613e-01,  6.4380e-01,  7.6295e-02,  1.2503e-01,  5.3716e-01,
            4.0912e-01,  2.4292e-01,  7.4996e-01, -1.7956e-01,  6.5864e-01,
            -1.0631e-01,  1.0585e-02,  7.0074e-01,  2.8872e-01, -1.8268e-01,
            7.4357e-02,  6.2748e-01,  1.1194e-01,  5.0131e-01, -2.0614e-01,
            -2.0135e-01,  5.2994e-01,  7.1803e-01,  8.1676e-01,  2.6333e-01,
            -3.2101e-02, -3.6300e-02, -3.3858e-02, -2.4971e-02, -1.6768e-02,
            -5.8664e-02, -4.1183e-02,  1.0284e-02,  2.6104e-02, -7.0187e-02,
            -6.9112e-02, -7.2335e-02, -1.2507e-01, -4.2161e-02,  1.2626e-02,
            -6.6088e-02,  3.8441e-01, -1.4763e-01, -5.5340e-04, -1.7195e-01,
            -8.7183e-02, -1.7498e-01, -1.6696e-01,  3.0707e-01,  8.4165e-01,
            5.2613e-01,  6.4380e-01,  7.6295e-02,  1.2503e-01,  5.3716e-01,
            4.0912e-01,  2.4292e-01,  7.4996e-01, -1.7956e-01,  6.5864e-01,
            -1.0631e-01,  1.0585e-02,  7.0074e-01,  2.8872e-01, -1.8268e-01,
            7.4357e-02,  6.2748e-01,  1.1194e-01,  5.0131e-01, -2.0614e-01,
            -2.0135e-01,  5.2994e-01,  7.1803e-01,  8.1676e-01,  2.6333e-01,
            4.2036e+00,  3.8829e+00,  3.7165e+00,  3.1441e+00,  3.1279e+00,
            3.1163e+00,  3.0704e+00,  2.7065e+00,  2.5601e+00,  2.4077e+00,
            2.3685e+00,  2.2100e+00,  2.1977e+00,  2.0048e+00,  1.8881e+00,
            1.7655e+00,  1.6373e+00,  1.4610e+00,  1.4433e+00,  1.2867e+00,
            1.2390e+00,  1.2774e+00,  1.2189e+00,  1.1180e+00,  1.2094e+00,
            9.9149e-01,  1.0839e+00,  2.0060e+00,  1.1578e+00,  8.1281e-01,
            8.6325e-01,  1.5055e+00,  9.7117e-01,  7.4574e-01,  6.6416e-01,
            6.5828e-01,  1.5373e+00,  6.1820e-01,  1.2605e+00,  1.1017e+00,
            6.3750e-01,  9.2549e-01,  1.1785e+00,  5.0930e-01,  6.0640e-01,
            6.8775e-01,  4.0764e-01,  6.6449e-01,  3.9109e-01,  1.0039e+00,
            4.2036e+00,  3.8829e+00,  3.7165e+00,  3.1441e+00,  3.1279e+00,
            3.1163e+00,  3.0704e+00,  2.7065e+00,  2.5601e+00,  2.4077e+00,
            2.3685e+00,  2.2100e+00,  2.1977e+00,  2.0048e+00,  1.8881e+00,
            1.7655e+00,  1.6373e+00,  1.4610e+00,  1.4433e+00,  1.2867e+00,
            1.2390e+00,  1.2774e+00,  1.2189e+00,  1.1180e+00,  1.2094e+00,
            9.9149e-01,  1.0839e+00,  2.0060e+00,  1.1578e+00,  8.1281e-01,
            8.6325e-01,  1.5055e+00,  9.7117e-01,  7.4574e-01,  6.6416e-01,
            6.5828e-01,  1.5373e+00,  6.1820e-01,  1.2605e+00,  1.1017e+00,
            6.3750e-01,  9.2549e-01,  1.1785e+00,  5.0930e-01,  6.0640e-01,
            6.8775e-01,  4.0764e-01,  6.6449e-01,  3.9109e-01,  1.0039e+00,
            -1.6944e-01, -1.6908e-01, -2.4672e-01, -2.4452e-01, -2.7565e-01,
            -1.5864e-01, -2.6961e-01, -2.0076e-01, -1.2293e-01, -3.2472e-01,
            -3.1520e-01, -3.9595e-01, -1.4289e-01, -4.3862e-01, -2.7455e-01,
            -2.5532e-01, -3.0550e-01, -4.1078e-01, -2.7473e-01, -2.9213e-01,
            -3.3992e-01, -1.3484e-01, -3.2417e-01, -7.9697e-01,  1.4258e-01,
            -2.2731e-01,  1.6413e-02,  1.2121e+00,  2.2424e-01, -3.9943e-01,
            -4.0900e-02,  8.8143e-01,  2.8467e-01, -9.7037e-01, -3.7398e-01,
            -3.7892e-01,  1.0178e+00, -5.4903e-01,  7.3641e-01,  5.8314e-01,
            -1.1927e-01,  4.1505e-01,  7.8548e-01, -2.4122e-01,  1.8245e-02,
            1.6711e-01, -4.5949e-01,  2.3486e-01, -3.6867e-01,  7.3201e-01,
            -1.6944e-01, -1.6908e-01, -2.4672e-01, -2.4452e-01, -2.7565e-01,
            -1.5864e-01, -2.6961e-01, -2.0076e-01, -1.2293e-01, -3.2472e-01,
            -3.1520e-01, -3.9595e-01, -1.4289e-01, -4.3862e-01, -2.7455e-01,
            -2.5532e-01, -3.0550e-01, -4.1078e-01, -2.7473e-01, -2.9213e-01,
            -3.3992e-01, -1.3484e-01, -3.2417e-01, -7.9697e-01,  1.4258e-01,
            -2.2731e-01,  1.6413e-02,  1.2121e+00,  2.2424e-01, -3.9943e-01,
            -4.0900e-02,  8.8143e-01,  2.8467e-01, -9.7037e-01, -3.7398e-01,
            -3.7892e-01,  1.0178e+00, -5.4903e-01,  7.3641e-01,  5.8314e-01,
            -1.1927e-01,  4.1505e-01,  7.8548e-01, -2.4122e-01,  1.8245e-02,
            1.6711e-01, -4.5949e-01,  2.3486e-01, -3.6867e-01,  7.3201e-01,
            -3.0759e-02, -1.2497e-02, -3.9308e-01, -3.9190e-01, -4.0362e-01,
            -1.8943e-02, -4.0382e-01, -4.0059e-01,  6.8622e-04, -3.5714e-01,
            1.4171e-01, -3.1407e-01, -3.4991e-01, -4.2286e-01, -3.7325e-01,
            -4.4308e-01, -3.8517e-01, -3.5655e-01, -4.0304e-01, -4.8263e-01,
            -2.9844e-01, -6.6402e-02,  9.7470e-02,  5.3860e-01,  1.1666e+00,
            -1.3665e-02, -4.6283e-02,  9.7221e-01,  3.3917e-01, -4.3410e-01,
            2.7316e-01,  1.2253e+00,  1.0661e+00,  5.2424e-01,  8.3460e-01,
            5.4251e-01,  2.3692e-01,  9.1643e-01,  5.8898e-01,  1.3585e+00,
            -3.0938e-01,  3.5567e-01,  2.1162e-01, -5.1885e-01,  4.1330e-01,
            8.6449e-01, -4.7619e-01,  1.2515e+00, -2.1000e-02,  4.9630e-01,
            -3.0759e-02, -1.2497e-02, -3.9308e-01, -3.9190e-01, -4.0362e-01,
            -1.8943e-02, -4.0382e-01, -4.0059e-01,  6.8622e-04, -3.5714e-01,
            1.4171e-01, -3.1407e-01, -3.4991e-01, -4.2286e-01, -3.7325e-01,
            -4.4308e-01, -3.8517e-01, -3.5655e-01, -4.0304e-01, -4.8263e-01,
            -2.9844e-01, -6.6402e-02,  9.7470e-02,  5.3860e-01,  1.1666e+00,
            -1.3665e-02, -4.6283e-02,  9.7221e-01,  3.3917e-01, -4.3410e-01,
            2.7316e-01,  1.2253e+00,  1.0661e+00,  5.2424e-01,  8.3460e-01,
            5.4251e-01,  2.3692e-01,  9.1643e-01,  5.8898e-01,  1.3585e+00,
            -3.0938e-01,  3.5567e-01,  2.1162e-01, -5.1885e-01,  4.1330e-01,
            8.6449e-01, -4.7619e-01,  1.2515e+00, -2.1000e-02,  4.9630e-01,
            4.8157e+00,  4.7340e+00,  4.5565e+00,  4.0337e+00,  3.6936e+00,
            2.7996e+00,  2.6955e+00,  2.6205e+00,  2.5810e+00,  2.5119e+00,
            2.3150e+00,  2.2587e+00,  1.9336e+00,  1.7950e+00,  1.6605e+00,
            1.5785e+00,  1.5264e+00,  1.3750e+00,  1.1598e+00,  1.1531e+00,
            1.1141e+00,  1.0403e+00,  9.9945e-01,  7.7199e-01,  6.9510e-01,
            5.7841e-01,  5.7347e-01,  5.0515e-01,  4.9448e-01,  4.3117e-01,
            3.9302e-01,  2.8671e-01,  2.8156e-01,  2.7193e-01,  2.0819e-01,
            1.2470e-01,  1.1865e-01,  1.1343e-01, -3.7308e-02, -5.9862e-02,
            -7.7117e-02, -1.2243e-01, -1.2354e-01, -2.1367e-01, -2.1852e-01,
            -2.1973e-01, -2.3444e-01, -2.4874e-01, -2.8249e-01, -3.0409e-01,
            4.8157e+00,  4.7340e+00,  4.5565e+00,  4.0337e+00,  3.6936e+00,
            2.7996e+00,  2.6955e+00,  2.6205e+00,  2.5810e+00,  2.5119e+00,
            2.3150e+00,  2.2587e+00,  1.9336e+00,  1.7950e+00,  1.6605e+00,
            1.5785e+00,  1.5264e+00,  1.3750e+00,  1.1598e+00,  1.1531e+00,
            1.1141e+00,  1.0403e+00,  9.9945e-01,  7.7199e-01,  6.9510e-01,
            5.7841e-01,  5.7347e-01,  5.0515e-01,  4.9448e-01,  4.3117e-01,
            3.9302e-01,  2.8671e-01,  2.8156e-01,  2.7193e-01,  2.0819e-01,
            1.2470e-01,  1.1865e-01,  1.1343e-01, -3.7308e-02, -5.9862e-02,
            -7.7117e-02, -1.2243e-01, -1.2354e-01, -2.1367e-01, -2.1852e-01,
            -2.1973e-01, -2.3444e-01, -2.4874e-01, -2.8249e-01, -3.0409e-01,
            5.6472e+00,  5.5637e+00,  5.3926e+00,  4.8616e+00,  4.5172e+00,
            3.6336e+00,  3.5242e+00,  3.4385e+00,  3.3853e+00,  3.4170e+00,
            3.1216e+00,  3.2112e+00,  2.8267e+00,  2.6401e+00,  2.4389e+00,
            2.4203e+00,  2.5292e+00,  2.1249e+00,  2.1185e+00,  1.9485e+00,
            2.0025e+00,  2.0054e+00,  1.9556e+00,  1.7090e+00,  1.7862e+00,
            1.6869e+00,  1.6685e+00,  1.7540e+00,  1.7813e+00,  1.4229e+00,
            1.5010e+00,  1.8533e+00,  1.2905e+00,  1.1181e+00,  1.3787e+00,
            8.9487e-01,  9.4292e-01,  9.4067e-01,  1.2244e+00,  8.5835e-01,
            1.4543e+00,  6.1043e-01,  1.2296e+00,  1.0473e+00,  5.6585e-01,
            4.9595e-01,  1.1469e+00,  1.1285e+00,  1.0701e+00,  7.7133e-01,
            5.6472e+00,  5.5637e+00,  5.3926e+00,  4.8616e+00,  4.5172e+00,
            3.6336e+00,  3.5242e+00,  3.4385e+00,  3.3853e+00,  3.4170e+00,
            3.1216e+00,  3.2112e+00,  2.8267e+00,  2.6401e+00,  2.4389e+00,
            2.4203e+00,  2.5292e+00,  2.1249e+00,  2.1185e+00,  1.9485e+00,
            2.0025e+00,  2.0054e+00,  1.9556e+00,  1.7090e+00,  1.7862e+00,
            1.6869e+00,  1.6685e+00,  1.7540e+00,  1.7813e+00,  1.4229e+00,
            1.5010e+00,  1.8533e+00,  1.2905e+00,  1.1181e+00,  1.3787e+00,
            8.9487e-01,  9.4292e-01,  9.4067e-01,  1.2244e+00,  8.5835e-01,
            1.4543e+00,  6.1043e-01,  1.2296e+00,  1.0473e+00,  5.6585e-01,
            4.9595e-01,  1.1469e+00,  1.1285e+00,  1.0701e+00,  7.7133e-01,
            -4.9961e-02, -5.1975e-02, -4.4834e-02, -5.3990e-02, -5.8750e-02,
            -4.7214e-02, -5.3074e-02, -6.4976e-02, -8.0358e-02,  3.1157e-02,
            -7.7794e-02,  8.2794e-02,  1.7973e-02, -3.4946e-02, -1.0929e-01,
            -3.8608e-02,  1.3700e-01, -1.4152e-01,  8.9386e-02, -9.0429e-02,
            1.2663e-02,  9.6162e-02,  8.6457e-02,  6.5582e-02,  2.3130e-01,
            2.4943e-01,  2.3514e-01,  3.9701e-01,  4.3657e-01,  1.2509e-01,
            2.4869e-01,  7.2496e-01,  1.4285e-01, -3.3664e-02,  3.1461e-01,
            -1.1863e-01, -5.9666e-02, -5.6370e-02,  4.1020e-01,  4.5440e-02,
            6.8871e-01, -1.6093e-01,  5.0487e-01,  4.0873e-01, -1.0618e-01,
            -1.8473e-01,  5.3380e-01,  5.2959e-01,  5.0395e-01,  2.1244e-01,
            -4.9961e-02, -5.1975e-02, -4.4834e-02, -5.3990e-02, -5.8750e-02,
            -4.7214e-02, -5.3074e-02, -6.4976e-02, -8.0358e-02,  3.1157e-02,
            -7.7794e-02,  8.2794e-02,  1.7973e-02, -3.4946e-02, -1.0929e-01,
            -3.8608e-02,  1.3700e-01, -1.4152e-01,  8.9386e-02, -9.0429e-02,
            1.2663e-02,  9.6162e-02,  8.6457e-02,  6.5582e-02,  2.3130e-01,
            2.4943e-01,  2.3514e-01,  3.9701e-01,  4.3657e-01,  1.2509e-01,
            2.4869e-01,  7.2496e-01,  1.4285e-01, -3.3664e-02,  3.1461e-01,
            -1.1863e-01, -5.9666e-02, -5.6370e-02,  4.1020e-01,  4.5440e-02,
            6.8871e-01, -1.6093e-01,  5.0487e-01,  4.0873e-01, -1.0618e-01,
            -1.8473e-01,  5.3380e-01,  5.2959e-01,  5.0395e-01,  2.1244e-01,
            -3.2101e-02, -3.6300e-02, -3.3858e-02, -2.4971e-02, -1.6768e-02,
            -5.8664e-02, -4.1183e-02,  1.0284e-02,  2.6104e-02, -7.0187e-02,
            -6.9112e-02, -7.2335e-02, -1.2507e-01, -4.2161e-02,  1.2626e-02,
            -6.6088e-02,  3.8441e-01, -1.4763e-01, -5.5340e-04, -1.7195e-01,
            -8.7183e-02, -1.7498e-01, -1.6696e-01,  3.0707e-01,  8.4165e-01,
            5.2613e-01,  6.4380e-01,  7.6295e-02,  1.2503e-01,  5.3716e-01,
            4.0912e-01,  2.4292e-01,  7.4996e-01, -1.7956e-01,  6.5864e-01,
            -1.0631e-01,  1.0585e-02,  7.0074e-01,  2.8872e-01, -1.8268e-01,
            7.4357e-02,  6.2748e-01,  1.1194e-01,  5.0131e-01, -2.0614e-01,
            -2.0135e-01,  5.2994e-01,  7.1803e-01,  8.1676e-01,  2.6333e-01,
            -3.2101e-02, -3.6300e-02, -3.3858e-02, -2.4971e-02, -1.6768e-02,
            -5.8664e-02, -4.1183e-02,  1.0284e-02,  2.6104e-02, -7.0187e-02,
            -6.9112e-02, -7.2335e-02, -1.2507e-01, -4.2161e-02,  1.2626e-02,
            -6.6088e-02,  3.8441e-01, -1.4763e-01, -5.5340e-04, -1.7195e-01,
            -8.7183e-02, -1.7498e-01, -1.6696e-01,  3.0707e-01,  8.4165e-01,
            5.2613e-01,  6.4380e-01,  7.6295e-02,  1.2503e-01,  5.3716e-01,
            4.0912e-01,  2.4292e-01,  7.4996e-01, -1.7956e-01,  6.5864e-01,
            -1.0631e-01,  1.0585e-02,  7.0074e-01,  2.8872e-01, -1.8268e-01,
            7.4357e-02,  6.2748e-01,  1.1194e-01,  5.0131e-01, -2.0614e-01,
            -2.0135e-01,  5.2994e-01,  7.1803e-01,  8.1676e-01,  2.6333e-01
            };

    vector<float> pf_mask = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1
            };

    vector<float> sv_points = {0.0522,  0.0540,  0.0000,  0.0000,  0.0000,
        0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
        0.0266,  0.0390,  0.0000,  0.0000,  0.0000,
        0.0000,  0.0000,  0.0000,  0.0000,  0.0000
            };

    vector<float> sv_features = {0.0522,  0.0540,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.0266,  0.0390,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.3174,  0.0300,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.0849,  0.0400,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            -0.0720,  0.1000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            1.0320,  0.2000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            -0.1591,  0.8000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.2157,  0.5000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.5040,  0.0200,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            0.6419,  0.1000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
            -0.2050,  0.5000,  0.0000,  0.0000,  0.0000,
            0.0000,  0.0000,  0.0000,  0.0000,  0.0000
            };

    vector<float> sv_mask = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0};


    vector<vector<float>> inputTensorValues = {pf_points, pf_features, pf_mask, sv_points, sv_features, sv_mask};
    vector<vector<int64_t>> inputTensorDims = {{1, 2, 100}, {1, 15, 100}, {1, 1, 100}, {1, 2, 10}, {1, 11, 10}, {1, 1, 10}};
    const char* inputNames[] = {"pf_points", "pf_features", "pf_mask", "sv_points", "sv_features", "sv_mask"};

    vector<vector<float>> outputTensorValues = {{999.}};
    vector<vector<int64_t>> outputTensorDims = {{1, 1}};
    const char* outputNames[] = {"softmax"};

    //---------------------------------------------------------------------------------------------

    vector<Ort::Value> inputTensors;
    for (size_t i = 0; i < Test::numInputNodes; i++){
        inputTensors.push_back(Ort::Value::CreateTensor<float>( Test::memoryInfo, inputTensorValues[i].data(), inputTensorValues[i].size(), inputTensorDims[i].data(), inputTensorDims[i].size()));
    }

    vector<Ort::Value> outputTensors;
    for (size_t i = 0; i < Test::numOutputNodes; i++){
        outputTensors.push_back(Ort::Value::CreateTensor<float>( Test::memoryInfo, outputTensorValues[i].data(), outputTensorValues[i].size(), outputTensorDims[i].data(), outputTensorDims[i].size()));
    }


    Test::session.Run(Ort::RunOptions{nullptr}, inputNames, inputTensors.data(), Test::numInputNodes,
                outputNames, outputTensors.data(), Test::numOutputNodes);


    vector<float> prediction;
    if( Test::numOutputNodes == 1 ){
        prediction.push_back(1-outputTensorValues.at(0).at(0));
    }else{
        for (size_t i = 0; i < Test::numOutputNodes; i++){
            prediction.push_back(outputTensorValues.at(0).at(i));
        }
    }

    Test::ZtoQQxQCD_tag = prediction.at(0);


    //======ASSIGN VALUES TO THE OUTPUT VARIABLES==================================================
    //Test::variable1Name = 100;      [Example]

    //======FILL THE HISTOGRAMS====================================================================
    //_histograms1D.at("histogram1DName").Fill( var, evtWeight );               [Example]
    //_histograms2D.at("histogram2DName").Fill( var1, var2, evtWeight );        [Example]

    //======FILL THE OUTPUT TREE===================================================================
    //_outputTree->Fill();

    //======FILL THE OUTPUT HDF5 INFO===============================================================
    HDF_fill();

    return;
}


//-------------------------------------------------------------------------------------------------
// Produce systematic histograms
//-------------------------------------------------------------------------------------------------
void HEPHero::TestSystematic() {

    //FillSystematic( "histogram1DSysName", var, evtWeight );  [Example]
    //FillSystematic( "histogram2DSysName", var1, var2, evtWeight );  [Example]
}


//-------------------------------------------------------------------------------------------------
// Make efficiency plots
//-------------------------------------------------------------------------------------------------
void HEPHero::FinishTest() {

    //MakeEfficiencyPlot( _histograms1D.at("Matched_pt"), _histograms1D.at("all_pt"), "Match_pt" );   [example]

    return;
}
